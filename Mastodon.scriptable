{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-purple",
    "glyph" : "bullhorn"
  },
  "name" : "Mastodon",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-purple; icon-glyph: bullhorn;\n\/\/ created by: iamrbn\n\/\/ github repo: https:\/\/github.com\/iamrbn\/Mastodon-Widget\n\n\n\/\/=========================================\/\/\n\/\/=========== START CONFIG ZONE ===========\/\/\n\nvar CONFIGS = {\n      DEVICES: {\n       iPad: {\n        notifications: false, \/\/true: Allow new Pushnotifications, opposite 'false'\n        refreshInt: 60\n        },\n       iPhone: {\n        notifications: true,\n        refreshInt: 60\n        }\n     }\n};\n\nlet roundProfileImages = true\nlet reposts = false\nlet favUsers = [\n      'simonbs@mastodon.social',\n      'christianselig@mastodon.social',\n      'elhotzo@mastodon.social',\n      'icesck@mastodon.social',\n      'iamrbn@mastodon.social',\n      'mammoth@moth.social',\n      'ivory@tapbots.social',\n      'mvan231@mastodon.social',\n      'IceCubesApp@mastodon.online'\n     ];\n\n\/\/============ END CONFIG ZONE ============\/\/\n\/\/=========================================\/\/\n\n\nlet nKey = Keychain\nlet wSize = config.widgetFamily\nlet fm = FileManager.iCloud()\nlet dir = fm.joinPath(fm.documentsDirectory(), 'Mastodon-Widget')\nif (!fm.fileExists(dir)) fm.createDirectory(dir)\nlet modulePath = fm.joinPath(dir, \"mastodonModule.js\")\nif (!fm.fileExists(modulePath)) await loadModule()\nlet mModule = importModule(modulePath)\nif (!fm.isFileDownloaded(modulePath)) await fm.downloadFileFromiCloud(modulePath)\nlet uCheck = await mModule.updateCheck(fm, modulePath, 1.0)\nawait mModule.saveImages(fm, dir)\nlet df = new DateFormatter()\n    df.dateFormat = 'dd.MM.yy, HH:mm'\nlet top = new Color(\"#6364F6\")\nlet middle = new Color(\"#5748D4\")\nlet bottom = new Color(\"#523BC4\")\nlet bgGradient = new LinearGradient()\n    bgGradient.locations = [0, 0.5, 1]\n    bgGradient.colors = [top, middle, bottom]\nlet txtBGColor = Color.dynamic(new Color('#D5D7DC33'), new Color('#24242433'))\nlet cornerRadius = (roundProfileImages) ? 25 : 6\nlet nParameter = await args.notification\nlet wParameter = await args.widgetParameter\nif (wParameter != null){\n    userName = wParameter.split('@')[0]\n    userInstance = wParameter.split('@')[1]\n} else {\n    favUser = favUsers[Math.floor(Math.random()*favUsers.length)]\n    userName = favUser.split('@')[0]\n    userInstance = favUser.split('@')[1]\n};\n\nlet userID = await mModule.getUserID(userName, userInstance)\nlet res = await new Request(`https:\/\/${ userInstance }\/api\/v1\/accounts\/${ userID }\/statuses`).loadJSON()\nvar body = res[0].content.replace(\/<[^>]*>\/g, '').replaceAll('&quot;','\"').replace(\/&#[\\d+;]*\/g, \"'\").replaceAll('&amp;', '&')\nvar reblogBody = (res[0].reblog == null) ? '' : res[0].reblog.content.replace(\/<[^>]*>\/g, '').replace(\/&#[\\d+;]*\/g, \"'\")\nvar appName = (res[0].application == null) ? '' : (!res[0].application.name.toLowerCase().includes('via')) ? 'via '+ res[0].application.name : res[0].application.name\n\n\nif (config.runsInNotification){\n    QuickLook.present(nParameter.userInfo.url)\n} else if (config.runsInWidget || config.runsInAccessoryWidget){\n    switch (wSize){\n     case \"small\": w = await createSmallWidget()\n     break;\n     case \"medium\": w = await createMediumWidget()\n     break;\n     case \"large\": w = await createLargeWidget()\n     break;\n     default: w = await createSmallWidget()\n    }\n    Script.setWidget(w)\n} else if (config.runsInApp){\n    await presentMenu()\n};\n\n\nif (userName === \"simonbs\") userName = \"simon.bs\"\nif (!nKey.contains(`${ userName }_post_id`)) nKey.set(`${ userName }_post_id`, res[0].id)\n    \/\/console.warn(userName + \": \" + nKey.get(`${ userName }_post_id`))\nif (nKey.get(`${ userName }_post_id`) != res[0].id && CONFIGS.DEVICES[Device.model()].notifications) await mModule.notificationScheduler(df, res, body, reblogBody, nKey, userName)\n\/\/log(nKey.contains(\"mammothpost_id\"))\n\/\/nKey.remove(\"simonbs_post_id\"))\n\n\nasync function createSmallWidget(){\n  let w = new ListWidget()\n      w.setPadding(7, 7, 3, 7)\n      w.refreshAfterDate = new Date(Date.now() + 1000 * 60 * CONFIGS.DEVICES[Device.model()].refreshInt)\n      w.url = res[0].url\n      w.backgroundGradient = bgGradient\n  \n  let mainStack = w.addStack()\n      mainStack.layoutVertically()\n      mainStack.backgroundImage = await mModule.getImage(fm, dir, \"mastodon_10\")\n      mainStack.centerAlignContent()\n\n  let hStack = mainStack.addStack()\n      hStack.spacing = 4\n  \n  let wImage = hStack.addImage(await mModule.loadImage(res[0].account.avatar))\n      wImage.imageSize = new Size(25, 25)\n      wImage.cornerRadius = cornerRadius\n  \n  let hStack2 = hStack.addStack()\n      hStack2.topAlignContent()\n      hStack2.layoutVertically()\n  \n  let wTitle = hStack2.addText(res[0].account.display_name.replace(\/(?<=:)\\w+\\D(?=:)\/g, '').replace(\/[:]\/g, \"\"))\n      wTitle.font = Font.boldRoundedSystemFont(12)\n      wTitle.minimumScaleFactor = 0.7\n      wTitle.lineLimit = 1\n      \/\/let applicationName = (res[0].application == null) ? \"\" : res[0].application.name\n  let wSubtitle = hStack2.addText(await mModule.getDateTime(res[0].created_at) + \" \" + appName)\n      wSubtitle.font = Font.thinRoundedSystemFont(7)\n      wSubtitle.minimumScaleFactor = 0.6\n      wSubtitle.lineLimit = 1\n      \n      w.addSpacer(2)\n      \n  if (!uCheck.needUpdate){\n    if (res[0].reblog == null){\n        wBody = mainStack.addText(body)\n        wBody.url = res[0].url\n    }else{\n        wBody = mainStack.addText(reblogBody)\n        wBody.url = res[0].reblog.url\n    }\n    wBody.font = Font.regularRoundedSystemFont(9)\n  } else {\n    updateInfo = mainStack.addText(`Version ${uCheck.uC.version} is Available\\nRun Script in App to update`)\n    updateInfo.font = new Font(\"Menlo-Bold\", 12)\n    updateInfo.textColor = Color.red()\n    updateInfo.shadowColor = Color.black()\n    updateInfo.shadowOffset = new Point(2, 5)\n    updateInfo.shadowRadius = 4\n    updateInfo.centerAlignText()\n  }\n  \n      mainStack.addSpacer()\n  \n  let countStack = mainStack.addStack()\n      countStack.centerAlignContent()\n      \n      replies = await mModule.getCounts(countStack, \"bubble.left.and.bubble.right\", res[0].replies_count, 12, 2)\n      reblogs = await mModule.getCounts(countStack, \"arrow.2.squarepath\", res[0].reblogs_count, 12, null)\n      stars = await mModule.getCounts(countStack, \"star\", res[0].favourites_count, 12, 2)\n  if (res[0].edited_at != null) edited = await mModule.getCounts(countStack, \"pencil\", \"\", 12, 2)\n  \n  return w\n};\n\n\nasync function createMediumWidget(){\n  let w = new ListWidget()\n      w.setPadding(7, 7, 1, 7)\n      w.refreshAfterDate = new Date(Date.now() + 1000 * 60 * CONFIGS.DEVICES[Device.model()].refreshInt)\n      w.backgroundGradient = bgGradient\n\n      w.addSpacer(2)\n  \n  let headerStack = w.addStack()\n      headerStack.url = res[0].account.url\n      headerStack.spacing = 4\n      \/\/headerStack.backgroundColor = Color.green()\n  \n  let userImage = headerStack.addImage(await mModule.loadImage(res[0].account.avatar))\n      userImage.imageSize = new Size(42, 42)\n      userImage.cornerRadius = cornerRadius\n  \n  let userStack = headerStack.addStack()\n      userStack.topAlignContent()\n      userStack.layoutVertically()\n      \/\/userStack.backgroundColor = Color.red()\n      userStack.spacing = -2\n      \n  let userDisplayNameStack = userStack.addStack()\n      userDisplayNameStack.spacing = 3\n      userDisplayNameStack.centerAlignContent()\n      userDisplayNameStack.setPadding(-2, 0, -2, 0)\n      \/\/userDisplayNameStack.backgroundColor = Color.blue()\n  \n  let displayName = await mModule.emojCreator(res[0].account.display_name, userInstance, userDisplayNameStack)\n      \n  let userName = userStack.addText(await mModule.createUserName(res[0].account.url))\n      userName.font = Font.lightRoundedSystemFont(12)\n      userName.textOpacity = 0.7\n  \n  let created = userStack.addText(await mModule.getDateTime(res[0].created_at) + \" \" + appName)\n      created.font = Font.thinRoundedSystemFont(8)\n      created.textOpacity = 0.5\n     \n      headerStack.addSpacer()\n     \n  let headerImg = headerStack.addImage(await mModule.getImage(fm, dir, 'mastodon'))\n      headerImg.imageSize = new Size(18, 18)\n      headerImg.url = `https:\/\/${ userInstance }\/`\n      \n      \n  if (!uCheck.needUpdate){\n    if (res[0].reblog == null){\n        wBody = w.addText(body)\n        wBody.url = res[0].url\n    }else{\n        wBody = w.addText(reblogBody)\n        wBody.url = res[0].reblog.url\n    }\n    wBody.font = Font.caption1()\n  } else {\n    updateInfo = w.addText(`Version ${uCheck.uC.version} is Available\\nRun Script in App to update`)\n    updateInfo.font = new Font(\"Menlo-Bold\", 12)\n    updateInfo.textColor = Color.red()\n    updateInfo.shadowColor = Color.black()\n    updateInfo.shadowOffset = new Point(2, 5)\n    updateInfo.shadowRadius = 4\n    updateInfo.centerAlignText()\n  }\n  \n      \n      \/\/.title3()\n      \/\/.subheadline()\n      \/\/.footnote()\n      \/\/.callout()\n      \/\/.body()\n     \/\/.regularRoundedSystemFont(10)\n  \n      w.addSpacer()\n  \n  let countStack = w.addStack()\n      countStack.centerAlignContent()\n      \/\/countStack.backgroundColor = Color.green()\n      \n  let replies = await mModule.getCounts(countStack, \"bubble.left.and.bubble.right\", res[0].replies_count, 14)\n  let reblogs = await mModule.getCounts(countStack, \"arrow.2.squarepath\", res[0].reblogs_count, 14)\n  let stars = await mModule.getCounts(countStack, \"star\", res[0].favourites_count, 14)\n   if (res[0].edited_at != null) edited = await mModule.getCounts(countStack, \"pencil\", \"\", 13)\n      \n  return w\n};\n\n\nasync function createLargeWidget(){\n  let w = new ListWidget()\n      w.setPadding(10, 7, 1, 0)\n      w.refreshAfterDate = new Date(Date.now() + 1000*60* CONFIGS.DEVICES[Device.model()].refreshInt)\n      w.backgroundGradient = bgGradient\n  \n  let mainStack = w.addStack()\n      \/\/mainStack.backgroundColor=Color.blue()\n      mainStack.spacing = 5\n  \n  let imgStack = mainStack.addStack()\n      imgStack.layoutVertically()\n      \/\/imgStack.backgroundColor = Color.green()\n      imgStack.backgroundImage = await mModule.drawLine(body.length)\n     \n  let userImage = imgStack.addImage(await mModule.loadImage(res[0].account.avatar))\n      userImage.imageSize = new Size(45, 45)\n      userImage.url = res[0].account.url\n      userImage.cornerRadius = cornerRadius\n      \n      imgStack.addSpacer()\n     \n  let bodyStack = mainStack.addStack()\n      bodyStack.layoutVertically()\n      bodyStack.topAlignContent()\n      \/\/bodyStack.backgroundColor=Color.gray()\n     \n      mainStack.addSpacer()\n      \n  let headerStack = bodyStack.addStack()\n      headerStack.spacing = 3\n      \/\/headerStack.backgroundColor=Color.red()\n      headerStack.url = res[0].account.url\n        \n  let displayName = await mModule.emojCreator(res[0].account.display_name, userInstance, headerStack)\n  \n      headerStack.addSpacer()\n  \n  let mastodonImg = headerStack.addImage(await mModule.getImage(fm, dir, 'mastodon'))\n      mastodonImg.imageSize = new Size(20, 20)\n      mastodonImg.url = `https:\/\/${ userInstance }\/`\n      \n  let userName = bodyStack.addText(await mModule.createUserName(res[0].account.url))\n      userName.font = Font.regularRoundedSystemFont(11)\n      userName.url = res[0].account.url\n      userName.textOpacity = 0.7\n      \n      bodyStack.addSpacer(3)\n      \n      \n  if (!uCheck.needUpdate){\n    if (res[0].reblog == null){\n        wBody = bodyStack.addText(body)\n        wBody.url = res[0].url\n    }else{\n        wBody = bodyStack.addText(reblogBody)\n        wBody.url = res[0].reblog.url\n    }\n    wBody.font = Font.caption1()\n  } else {\n    updateInfo = bodyStack.addText(`Version ${uCheck.uC.version} is Available\\nRun Script in App to update`)\n    updateInfo.font = new Font(\"Menlo-Bold\", 12)\n    updateInfo.textColor = Color.red()\n    updateInfo.shadowColor = Color.black()\n    updateInfo.shadowOffset = new Point(2, 5)\n    updateInfo.shadowRadius = 4\n    updateInfo.centerAlignText()\n  }\n\n      \/\/.title3()\n      \/\/.subheadline()\n      \/\/.footnote()\n      \/\/.callout()\n      \/\/.body()\n      \/\/.regularRoundedSystemFont(12)\n      \n      w.addSpacer(2)\n  \n      bodyStack.addSpacer(3)\n      \n  let wSubtitle = bodyStack.addText(await mModule.getDateTime(res[0].created_at) + \" \" + appName)\n      wSubtitle.font = Font.thinRoundedSystemFont(9)\n      wSubtitle.textOpacity = 0.5\n     \n  if (res[0].media_attachments[0] != undefined && !res[0].media_attachments[0].url.includes(\".mp4\")){\n      imgBody = bodyStack.addImage(await mModule.loadImage(res[0].media_attachments[0].url))\n      imgBody.cornerRadius = 10\n      imgBody.url = res[0].url\n  }\n      \n      w.addSpacer()\n      \n  let countStack = w.addStack()\n      countStack.topAlignContent()\n      \/\/countStack.backgroundColor = Color.red()\n\n  let replies = await mModule.getCounts(countStack, \"bubble.left.and.bubble.right\", res[0].replies_count, 16) \n  let reblogs = await mModule.getCounts(countStack, \"arrow.2.squarepath\", res[0].reblogs_count, 16)\n  let stars = await mModule.getCounts(countStack, \"star\", res[0].favourites_count, 16)\nedited = (res[0].edited_at != null) ? await mModule.getCounts(countStack, \"pencil\", \"\", 14) : null\n  if (res[0].edited_at != null) edited = await getCounts(countStack, \"pencil\", \"\", 14)\n  \n return w\n};\n\n\nasync function presentMenu(){\n    a = new Alert()\n    a.title = \"Widget Size\"\n    a.message = res[0].account.display_name.replace(\/(?<=:)\\w+\\D(?=:)\/g, '').replace(\/[:]\/g, \"\")\n    a.addAction(\"Small\")\n    a.addAction(\"Medium\")\n    a.addAction(\"Large\")\n    a.addCancelAction(\"Cancel\")\n    idx = await a.presentAlert()\n    if (idx == 0){\n        w = await createSmallWidget()\n        await w.presentSmall()\n    } else if (idx == 1){\n        w = await createMediumWidget()\n        await w.presentMedium()\n    } else if (idx == 2){\n        w = await createLargeWidget()\n        await w.presentLarge()\n   }\n};\n\n\nasync function loadModule(){\n   req = new Request('https:\/\/raw.githubusercontent.com\/iamrbn\/Mastodon-Widget\/main\/mastodonModule.js')\n   moduleFile = await req.loadString()\n   fm.writeString(modulePath, moduleFile)\n   console.warn('loaded mastodonModul.js file from github')\n};\n\n\/\/===============================\n\/\/===============================\n\/\/===============================\n",
  "share_sheet_inputs" : [

  ]
}